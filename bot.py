import logging
import os
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([TELEGRAM_TOKEN, YANDEX_API_KEY, FOLDER_ID]):
    raise ValueError("–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSE_GOAL, CHOOSE_LEVEL, CHOOSE_TYPE, ENTER_STATS = range(4)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_mass")],
        [InlineKeyboardButton("üî• –°—É—à–∫–∞", callback_data="goal_cut")],
        [InlineKeyboardButton("üí™ –°–∏–ª–∞", callback_data="goal_strength")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:",
            reply_markup=reply_markup
        )

    return CHOOSE_GOAL


async def button_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏."""
    query = update.callback_query
    await query.answer()

    goal_map = {
        "goal_mass": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
        "goal_cut": "—Å—É—à–∫–∞",
        "goal_strength": "—Å–∏–ª–∞"
    }

    context.user_data["goal"] = goal_map[query.data]

    keyboard = [
        [InlineKeyboardButton("üë∂ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
        [InlineKeyboardButton("üë® –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
        [InlineKeyboardButton("üë¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=reply_markup
    )

    return CHOOSE_LEVEL


async def button_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()

    level_map = {
        "level_beginner": "–Ω–æ–≤–∏—á–æ–∫",
        "level_intermediate": "—Å—Ä–µ–¥–Ω–∏–π",
        "level_advanced": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    }

    context.user_data["level"] = level_map[query.data]

    keyboard = [
        [InlineKeyboardButton("üîÑ –§—É–ª–±–∞–¥–∏", callback_data="type_fullbody")],
        [InlineKeyboardButton("üìä –°–ø–ª–∏—Ç", callback_data="type_split")],
        [InlineKeyboardButton("üèÉ‚Äç –ö–∞—Ä–¥–∏–æ + –°–∏–ª–æ–≤–∞—è", callback_data="type_cardio")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=reply_markup
    )

    return CHOOSE_TYPE


async def button_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()

    type_map = {
        "type_fullbody": "—Ñ—É–ª–±–∞–¥–∏",
        "type_split": "—Å–ø–ª–∏—Ç",
        "type_cardio": "–∫–∞—Ä–¥–∏–æ + —Å–∏–ª–æ–≤–∞—è"
    }

    context.user_data["type"] = type_map[query.data]

    await query.edit_message_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º) –∏ –≤–µ—Å (–≤ –∫–≥) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 185 75):"
    )

    return ENTER_STATS


async def enter_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞ –∏ –≤–µ—Å–∞."""
    user_id = update.effective_user.id

    try:
        height, weight = map(int, update.message.text.strip().split())

        if height < 100 or height > 250 or weight < 30 or weight > 200:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

        user_data = {
            "goal": context.user_data["goal"],
            "level": context.user_data.get("level", "—Å—Ä–µ–¥–Ω–∏–π"),
            "type": context.user_data.get("type", "—Ñ—É–ª–±–∞–¥–∏"),
            "height": height,
            "weight": weight,
            "history": []
        }

        user_data_store[user_id] = user_data

        response = await generate_workout(
            goal=user_data["goal"],
            height=height,
            weight=weight,
            level=user_data["level"],
            workout_type=user_data["type"]
        )

        user_data["history"].append(response)

        # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="regenerate"),
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
            ],
            [InlineKeyboardButton("‚úèÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_request")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(response, reply_markup=reply_markup)

    except ValueError as e:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 185 75). "
            "–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º, –≤–µ—Å –æ—Ç 30 –¥–æ 200 –∫–≥."
        )
        return ENTER_STATS
    except Exception as e:
        logger.error(f"Error in enter_stats: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ /start"
        )

    return ConversationHandler.END


async def generate_workout(goal: str, height: int, weight: int, level: str, workout_type: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é YandexGPT."""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = (
        f"–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        f"- –†–æ—Å—Ç: {height} —Å–º\n"
        f"- –í–µ—Å: {weight} –∫–≥\n"
        f"- –¶–µ–ª—å: {goal}\n"
        f"- –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {level}\n"
        f"- –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_type}\n\n"
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ 45-60 –º–∏–Ω—É—Ç, —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º, "
        "–ø–æ–¥—Ö–æ–¥–∞–º –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º. –£–∫–∞–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Å–∞–º –∏ –æ—Ç–¥—ã—Ö—É –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏. "
        "–î–∞–π –∫—Ä–∞—Ç–∫–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    )

    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 2000
        },
        "messages": [{"role": "user", "text": prompt}]
    }

    try:
        logger.info(f"Sending request to YandexGPT: {data}")

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                response_text = await response.text()

                if response.status != 200:
                    logger.error(f"YandexGPT API error: {response_text}")
                    return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status}): {response_text}"

                result = await response.json()
                logger.info(f"Received response from YandexGPT: {result}")

                if "result" not in result or "alternatives" not in result["result"]:
                    return "‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"

                return result["result"]["alternatives"][0]["message"]["text"]

    except Exception as e:
        logger.error(f"Error in generate_workout: {e}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"


async def regenerate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id not in user_data_store:
        await query.edit_message_text(
            "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return

    user_data = user_data_store[user_id]

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")

        response = await generate_workout(
            goal=user_data["goal"],
            height=user_data["height"],
            weight=user_data["weight"],
            level=user_data["level"],
            workout_type=user_data["type"]
        )

        user_data["history"].append(response)

        keyboard = [
            [
                InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="regenerate"),
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
            ],
            [InlineKeyboardButton("‚úèÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_request")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(response, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"Error in regenerate: {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )


async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id not in user_data_store or not user_data_store[user_id]["history"]:
        await query.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞!", show_alert=True)
        return

    history = user_data_store[user_id]["history"]
    message = "üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n" + "\n\n---\n\n".join(
        f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ #{i + 1}:\n{workout[:1000]}..." for i, workout in enumerate(history[-3:])
    )

    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_last")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, reply_markup=reply_markup)


async def back_to_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id not in user_data_store or not user_data_store[user_id]["history"]:
        await query.answer("–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!", show_alert=True)
        return

    last_workout = user_data_store[user_id]["history"][-1]

    keyboard = [
        [
            InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="regenerate"),
            InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
        ],
        [InlineKeyboardButton("‚úèÔ∏è –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_request")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(last_workout, reply_markup=reply_markup)


async def new_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if update.effective_user.id in user_data_store:
        del user_data_store[update.effective_user.id]

    # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await start(update, context)
    return CHOOSE_GOAL


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã."""
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_GOAL: [CallbackQueryHandler(button_goal)],
            CHOOSE_LEVEL: [CallbackQueryHandler(button_level)],
            CHOOSE_TYPE: [CallbackQueryHandler(button_type)],
            ENTER_STATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_stats)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(regenerate, pattern="^regenerate$"))
    application.add_handler(CallbackQueryHandler(show_history, pattern="^show_history$"))
    application.add_handler(CallbackQueryHandler(back_to_last, pattern="^back_to_last$"))
    application.add_handler(CallbackQueryHandler(new_request, pattern="^new_request$"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()